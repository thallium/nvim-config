snippet temp "template for competitve programming" 
#![allow(dead_code, unused_imports, unused_variables, unused_must_use)]
use std::{*, collections::*, io::Write};
use algo_lib::misc::input::*;

fn test_case<W: io::Write>(sc: &mut In, out: &mut std::io::BufWriter<W>) {
    $1
}

pub fn main() {
    use std::io::Read;
    let mut s = String::new();
    std::io::stdin().read_to_string(&mut s).unwrap();
    let mut sc = In::new(&s);
    let out = std::io::stdout();
    let mut out = std::io::BufWriter::new(out.lock());
    let t = 1;
    let t = sc.usize();
    for _ in 0..t {
        test_case(&mut sc, &mut out);
    }
}
endsnippet

snippet debug "debug macro" 
#[macro_export]
macro_rules! debug_single {
    ($val:expr $(,)?) => {
        match $val {
            tmp => {
                eprint!(" {} = {:?}", stringify!($val), &tmp);
                tmp
            }
        }
    };
}

#[cfg(debug_assertions)]
#[macro_export]
macro_rules! de {
    () => {
        eprintln!("#{}", line!())
    };
    ($($val:expr),+ $(,)?) => {
        eprint!("#{}", line!());
        ($(debug_single!($val)),+,);
        eprintln!();
    };
}

#[cfg(not(debug_assertions))]
#[macro_export]
macro_rules! de {
    ($($val:expr),+ $(,)?) => { };
}
endsnippet
