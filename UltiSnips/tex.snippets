# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def notMath():
    return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'
endglobal
#{{{ Template
snippet template "math template" b
%! TeX program = lualatex
\documentclass{article}
\usepackage[english]{babel}
\usepackage[bookmarks, colorlinks, linkcolor=blue]{hyperref}
\usepackage{amssymb, amsthm, amsmath}
\usepackage{soul}
\usepackage{parskip} % add line between paragraphs
\usepackage{tikz}
\usetikzlibrary{graphdrawing, graphs, graphs.standard}
\usegdlibrary{force, circular, layered}

\usepackage[left=70pt, top=50pt, right=70pt, bottom=50pt]{geometry}
\setlength\parindent{0pt} % No indent for all paragraph

\title{Notes for Chapter 1}
\author{Gengchen Tuo}
\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]

\theoremstyle{definition}
\newtheorem{ex}{Example}[section]

\theoremstyle{definition}
\newtheorem{theorem}{Theorem}

\newcommand\solu{
    \textbf{Solution.}
}

\newcommand{\N}{\mathbb{N}}
\newcommand{\F}{\mathbb{F}}
\newcommand{\C}{\mathbb{C}}
\newcommand{\R}{\mathbb{R}}


\begin{document}
${0}
\end{document}
endsnippet

snippet linearalgebra "linear algebra commands" 
\DeclareMathOperator{\spn}{span}
\DeclareMathOperator{\tr}{Tr}
\DeclareMathOperator{\im}{Im}
\DeclareMathOperator{\nlt}{nullity}
\DeclareMathOperator{\rank}{rank}
\newenvironment{amatrix}[1]{
  \left(\begin{array}{@{}*{#1}{c}|c@{}}
}{
  \end{array}\right)
}
endsnippet

#}}}

#{{{ General
snippet mk "Math" wA
$$1$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\]
$0
endsnippet

snippet bf "bold face" wA
\textbf{$1}$0
endsnippet

snippet __ "underline" wA 
\ul{$1}$0
endsnippet


snippet eph "emphasize" wA
\emph{$1}$0
endsnippet

snippet oto "one-to-one" wA
one-to-one
endsnippet

snippet bsk "big skip" wA
\bigskip
endsnippet

#}}}
#{{{ Math
#{{{ Superscript and subscript
context "math()"
snippet '(\\?[A-Za-z]+)(\d+)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# snippet '(\S*\})(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet
# snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
# `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet
#}}}
#{{{ Fraction
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# context "math()"
# snippet / "Fraction" iA
# \\frac{${VISUAL}}{$1}$0
# endsnippet
#}}}
context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-zA-Z]+)(_\{?\w{1,3}\}?)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}`!p snip.rv=match.group(2)` 
endsnippet

context "math()"
snippet "(\\?[a-zA-Z0-9]+)(,\.|\.,)" "Vector postfix" wriA
\vec{`!p snip.rv=match.group(1)`} 
endsnippet

context "math()"
snippet sq "sqrt" wiA 
\sqrt{$1} $0
endsnippet

#{{{ Font
context "math()"
priority 100
snippet "bb" "blackboard bold" riA
\mathbb{${1}}${0}
endsnippet

context "math()"
snippet cal "mathcal" iA
\mathcal 
endsnippet
#}}}
#{{{ Chars and symbols
context "math()"
snippet pi "pi" wA
\pi
endsnippet

context "math()"
snippet tht "theta" iwA
\theta 
endsnippet

context "math()"
snippet lbd "lambda" wA
\lambda 
endsnippet

context "notMath()"
snippet lbd "lambda" wA
$\lambda$ 
endsnippet

context "math()"
snippet clb "curly bracket" iA
\\{${1}\\}${0}
endsnippet

context "math()"
snippet cd "cdot" wA
\cdot 
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet


context "math()"
snippet .. "\dots" wA
\dots 
endsnippet

context "math()"
snippet int "integral" wA
\int_{$1}^{$2}$0
endsnippet

context "math()"
snippet sum "summation" wA
\sum_{$1}^{$2}$0
endsnippet

context "math()"
snippet ;T "bot" iA
\bot 
endsnippet

context "math()"
snippet ;rt "root" iA
\sqrt{$1}$0
endsnippet


#}}}
snippet fc "function" wA
$${1:T}:${2:V}\to ${3:W}$${0}
endsnippet 

context "math()"
snippet vton "vector from 1 to n" wA
\vec{$1}_1, \dots, \vec{$1}_n
endsnippet

context "math()"
snippet ton "from 1 to n" wA
$1_1, \dots, $1_n
endsnippet

context "math()"
snippet ;F "Field" iA
\F 
endsnippet

context "math()"
snippet ;R "Field" iA
\R 
endsnippet

context "math()"
snippet ;N "Field" iA
\N 
endsnippet

context "math()"
snippet ;K "Field" iA
\K 
endsnippet

context "math()"
snippet ;C "complex" iA
\C
endsnippet

context "math()"
snippet ;in "\in" iA
\in 
endsnippet

context "math()"
snippet ;< "inner product" iA
\langle $1\rangle$0
endsnippet

context "math()"
snippet ;ll  "length" iA
\\|$1\\|$0
endsnippet

context "math()"
snippet ;ge ">=" iA
\ge 
endsnippet

snippet aif "if in algorithmic env" wA 
\If{$1} $2 \EndIf$3
endsnippet

snippet ceil "ceil function" w 
\lceil $1 \rceil$0
endsnippet

snippet floor "floor function" w 
\lfloor $1 \rfloor$0
endsnippet

snippet afor "for in algorithmic env" wA
\For{$1}
$2
\EndFor
$0
endsnippet

#}}}

#{{{ Environment
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet amat "Augmented matrix" iA
\left[\begin{array}{@{}$1@{}}\end{array}\right]
endsnippet


snippet list "enumerate environment" w
\begin{enumerate}
${1}
\end{enumerate}
${0}
endsnippet

snippet thrm "Theorem" bA
\begin{theorem}
$1
\end{theorem}
$0
endsnippet

snippet code "code block" b
\begin{minted}{$1}
$2
\end{minted}
$0
endsnippet

snippet dd "definition" bA
\begin{definition}
$1
\end{definition}
$0
endsnippet

snippet itemize "itemize environment (unordered list)" w
\begin{itemize}
    \item Every spanning tree intersects every cutset.
    \item Every cycle in $G$ has  at least an edge which is not in a given spanning tree.
\end{itemize}
endsnippet


#}}}

snippet code "inline code" w
\mintinline{java}{$1}$0
endsnippet


snippet ssec "subsection" bA
\subsection{$1}$0
endsnippet

