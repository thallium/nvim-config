# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

snippet mk "Math" wA
$${1}$${0}
endsnippet

snippet bb "bold text" wA
**${1}** ${0}
endsnippet

snippet h2 "heading2" wbA
## 
endsnippet

snippet h3 "heading3" wbA
### 
endsnippet

snippet ii "Italic" wA
*${1}*${0}
endsnippet

snippet cb "code block" wbA
\`\`\`${1}
\`\`\`
endsnippet

snippet header "Blog post header" b
---
published: true
title: ${1:题解/Tutorial for }
category: ${2:题解/Tutorial}
tags: ${3}
layout: post
---
${0}
endsnippet

snippet more "hugo more" 
<!--more-->
endsnippet

snippet collapse "collapsible text" 
{{% collapse $1 %}}
$0
{{% /collapse %}}
endsnippet

